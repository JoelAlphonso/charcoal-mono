<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>{{# _t }}elFinder File Manager{{/ _t }}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2"/>

        {{# elfinderAssets }}
        <link rel="stylesheet" type="text/css" media="screen" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">

        <link rel="stylesheet" type="text/css" media="screen" href="{{ elfinder_assets_url }}css/elfinder.min.css">
        {{^ disableTheme }}
        <link rel="stylesheet" type="text/css" media="screen" href="{{ admin_assets_url }}styles/vendors/elfinder.css">
        {{/ disableTheme }}

        <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>

        <script src="{{ elfinder_assets_url }}js/elfinder.min.js"></script>

        {{!-- elFinder translation (OPTIONAL) --}}
        {{!--<script src="js/i18n/elfinder.fr.js"></script>--}}
        {{/ elfinderAssets }}

        <style type="text/css">
            body {
                margin: 0;
            }

            .elfinder {
                border: none;
                box-shadow: none;
            }
        </style>

        <script>
            // Documentation for client options:
            // https://github.com/Studio-42/elFinder/wiki/Client-configuration-options
            $(document).ready(function () {
                var elf, defaults, actionUri, i18nMsgs, settings = {}, $window = $(window);

                if (!$.fn.smartresize) {
                    // debouncing function from John Hann
                    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
                    var debounce = function(func, threshold, execAsap) {
                        var timeout;

                        return function debounced() {
                            var obj = this,
                                args = arguments;

                            function delayed() {
                                if (!execAsap)
                                    func.apply(obj, args);
                                timeout = null;
                            };

                            if (timeout)
                                clearTimeout(timeout);
                            else if (execAsap)
                                func.apply(obj, args);

                            timeout = setTimeout(delayed, threshold || 100);
                        };
                    };

                    $.fn.smartresize = function(fn) {
                        return fn ? this.bind('resize', debounce(fn)) : this.trigger('smartresize');
                    };
                }

                $window.smartresize(function(){
                    if (elf) {
                        var height = $window.height();

                        if (elf.options.height != height) {
                            elf.resize('auto', height);
                        }
                    }
                });

                actionUri = '{{ admin_url }}elfinder-connector' +
                            '?obj_type={{ objType }}' +
                            '&obj_id={{ objId }}' +
                            '&property={{ propertyIdent }}';

                defaults = {
                    url:        actionUri,
                    resizable:  false,
                    height:     $window.height(),
                    handlers:   {
                        init:   function(event, elf) {
                            $.extend(elf.messages, i18nMsgs.en || {}, i18nMsgs[elf.lang] || {});
                        }
                    },
                    cssAutoLoad: false,
                    getFileCallback: function (file) {
                        if (elf.option('separator') === '\\') {
                            var separator = /\\/g;
                            if ($.isArray(file)) {
                                file = $.map(file, function (f) {
                                    return f.path.replace(separator, '/');
                                });
                            } else {
                                file.path = file.path.replace(separator, '/');
                            }
                        }

                        if (typeof(parent.elFinderCallback['{{ elfinderCallback }}']) === 'function') {
                            parent.elFinderCallback['{{ elFinderCallback }}'](file, elf);
                        }
                    }
                };

                $.extend(
                    settings,
                    defaults,
                    {{& elfinderConfigAsJson }}
                );

                i18nMsgs = {{& elfinderLocalizationsAsJson }};

                var elfInit = function (settings) {
                    settings = elfDisableCommands(settings);

                    $().ready(function() {
                        elf = $('#elfinder')
                            .elfinder(settings)
                            .elfinder('instance');
                    });
                };

                var elfDisableCommands = function (settings) {
                    if (settings.disabledCommands && !settings.commands) {
                        var disabled = settings.disabledCommands;

                        var commands = elFinder.prototype._options.commands;

                        if ($.inArray('*', commands) !== -1) {
                            commands = Object.keys(elFinder.prototype.commands);
                        }

                        $.each(disabled, function(i, cmd) {
                            var idx = $.inArray(cmd, commands);
                            delete commands[idx];
                        });

                        settings.commands = commands;
                    }

                    delete settings.disabledCommands;

                    return settings;
                };

                if (settings.lang != 'en') {
                    $.ajax({
                        url:      '{{elfinder_assets_url}}js/i18n/elfinder.'+settings.lang+'.js',
                        cache:    true,
                        dataType: 'script'
                    })
                    .fail(function() {
                        settings.lang = 'en';
                    })
                    .always(function() {
                        elfInit(settings);
                    });
                } else {
                    elfInit(settings);
                }
            });
        </script>
    </head>

    <body>
        <div id="elfinder"></div>
    </body>
</html>
